一、常见23种设计模式的简单概述

  23种设计模式大致分为三个类型的设计模式

  创造型模式：对象实例化的模式，创建型模式用于对象创建解耦合过程

  结构型模式：把类或者对象结合在一起，形成一个更大的结构

  行为模式：类和对象如何交互，及划分责任和算法

  1、单例设计模式
     控制对象的创建次数，保证在整个程序的运行过程中该对象只有一个。

  2、工厂设计模式

    <1>、简单工厂设计模式
           只提供一个抽象的产品接口，接口的实现交给具体的子类产品，工厂类根据从外部传入的条件决定创建哪个具体子类对象，返回给
        调用者。
           优点：将类的具体实现过程封装起来了，调用者只需要提供相应的参数就能得到想要的对象。
           缺点：如果有新的产品需要添加，就必须要修改工厂的创建对象逻辑

    <2>、工厂方法模式
           大致上和简单工厂设计模式优点类似，为了解决简单工厂设计模式的需要频繁修改工厂创建对象的逻辑问题。将工厂抽象成一个接口，
         具体的创建对象的过程交给工厂的特定实现类就行了。
           也就是说如果有新的产品需要添加，只需要添加一个新的工厂实现子类，然后由实现类完成相应的对象创建即可。
            优点：解决了简单工厂的需要频繁修改创建对象逻辑代码问题。
            缺点：每增加一个产品，都需要提供一个具体的产品类和工厂实现类，类数量会过多。

     <3>、抽象工厂模式
             将属于一个产品族的多个产品定义在抽象工厂接口中，具体产品线的实现交给实现类，好处就是能够快速扩展能够生产一系类产品线。
          坏处，当增加新的产品时，扩展性差，简直是一场灾难。

   3、适配器模式
      调用者希望调用接口实现某个功能，该接口没有这个功能，调用者又不想改变这个接口。这时适配器就起到了作用，通过适配器实现目标接口
    ，并将具有该功能的类注入，通过调用注入的类来重写接口方法，

    4、代理设计模式
       主要就是通过代理类为原始类增加一些功能。常见的有jdk动态代理和cglib代理，jdk动态代理是通过实现接口方式来，cglib则是
     通过继承的方式。

