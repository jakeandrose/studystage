lambda表达式常和stream一起使用

lambda表达式的使用  （参数列表）   ->    {方法的实现部分}    lambda表达式实现的借口中必须有且只有一个未实现的方法
                  当参数只有一个的时候可以省略(),当方法实现部分只有一个表达式时，可以省略{}

 steam流

    stream流主要讲它的中间操作和终端操作

        中间操作
           1、筛选和切片
               （1） 筛选： filter()  方法中传入一个Predicate接口的实现类，由lambda表达式实现
                    该接口需要实现test方法，传入一个参数，返回值为boolean，当符合条件时将其放入到流中
                (2) 切片： 就是将流中的一些元素去除  limit、skip、distinct等
           2、映射 ：
                <1> map()  此方法需要传入一个Function接口的实现类，由lambda表达式实现
                    该接口需要实现apply方法，传入一个任意类型的参数，返回一个任意类型的变量
                    flatmap() 方法的功能和map相类似，不同的时flatmap会把传入的多个stream流整合成一个大的stream流
                    该方法同样需要传入一个Function接口的实现类
         终端操作
            1、收集： collect()方法，该方法，java提供了Collectors类来实现相应的常见数据收集方式
                 (1) 获取最大值和最小值： maxBy()和minBy(),这两个方法都需要实现Comparator接口，传入两个参数，返回一个int类型的变量
                 (2) 求和与计算平均值： 自行查看，在写代码的过程中自行查看需要实现的接口，较为简单，就不叙述
                 (3) 将数据重新整成集合或者map的数据形式
                 (4) 分组
            2、规约：需要实现reduce()方法，该方法，存在两种类型的重载，第一种是两个参数的
                  <1> 第一个参数为任意类型参数，第二个参数为BiFunction的实现类，该实现类需要实现apply方法，传入两个参数，返回任意类型的变量
                      解释，将第一个参数与stream流中的每一个元素操作后，结果再作为第一个参数传入reduce操作
                  <2> 只有BiFunction的实现类，该方法就是两两操作stream流中的元素
            3、遍历：这个较为基础和简单就不进行描述了





